# .github/workflows/ci.yml
name: Triton CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 毎日午前2時（UTC）に実行
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # コード品質チェック
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target/
        key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-build-

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Check documentation
      run: cargo doc --no-deps --document-private-items --all-features

  # テスト実行（複数OS）
  test:
    name: Tests
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust-version: [stable, beta]
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust-version }}

    - name: Cache cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-${{ matrix.rust-version }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.rust-version }}-cargo-

    - name: Run unit tests
      run: cargo test --lib --verbose

    - name: Run integration tests
      run: cargo test --test '*' --verbose

    - name: Run doc tests
      run: cargo test --doc --verbose

    - name: Build release binary
      run: cargo build --release --verbose

    - name: Test CLI commands (Unix)
      if: runner.os != 'Windows'
      run: |
        # 基本的なCLIテストを実行
        ./target/release/triton --help
        echo 'erDiagram
            users {
                int id PK
                string username UK
                string email UK
            }' > test_diagram.mermaid
        ./target/release/triton generate --input test_diagram.mermaid

    - name: Test CLI commands (Windows)
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        target\release\triton.exe --help
        echo erDiagram> test_diagram.mermaid
        echo     users {>> test_diagram.mermaid
        echo         int id PK>> test_diagram.mermaid
        echo         string username UK>> test_diagram.mermaid
        echo     }>> test_diagram.mermaid
        target\release\triton.exe generate --input test_diagram.mermaid

  # カバレッジテスト
  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin

    - name: Cache cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-coverage-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Generate coverage report
      run: |
        cargo tarpaulin --verbose --all-features --workspace \
          --timeout 120 --out xml --output-dir coverage/

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: coverage/cobertura.xml
        fail_ci_if_error: true

  # セキュリティ監査
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

    - name: Run cargo deny
      uses: EmbarkStudios/cargo-deny-action@v1

  # ベンチマークテスト
  benchmarks:
    name: Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-bench-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Run benchmarks
      run: cargo bench --verbose

    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      if: github.ref == 'refs/heads/main'
      with:
        tool: 'cargo'
        output-file-path: target/criterion/report/index.html
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true

  # パフォーマンステスト
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Build release
      run: cargo build --release

    - name: Create large test file
      run: |
        echo "erDiagram" > large_test.mermaid
        for i in {1..200}; do
          echo "    table_$i {" >> large_test.mermaid
          echo "        int id_$i PK" >> large_test.mermaid
          echo "        string name_$i" >> large_test.mermaid
          echo "        string description_$i" >> large_test.mermaid
          echo "    }" >> large_test.mermaid
        done

    - name: Run performance test
      run: |
        echo "Testing with 200 tables..."
        time ./target/release/triton generate --input large_test.mermaid > /dev/null

        # メモリ使用量チェック
        /usr/bin/time -v ./target/release/triton generate --input large_test.mermaid > /dev/null

  # リリースビルド
  release:
    name: Release Build
    runs-on: ${{ matrix.os }}
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        include:
        - os: ubuntu-latest
          target: x86_64-unknown-linux-gnu
          binary_name: triton
        - os: windows-latest
          target: x86_64-pc-windows-msvc
          binary_name: triton.exe
        - os: macos-latest
          target: x86_64-apple-darwin
          binary_name: triton
        - os: macos-latest
          target: aarch64-apple-darwin
          binary_name: triton

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Create release archive
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          7z a triton-${{ matrix.target }}.zip target/${{ matrix.target }}/release/${{ matrix.binary_name }}
        else
          tar -czf triton-${{ matrix.target }}.tar.gz -C target/${{ matrix.target }}/release ${{ matrix.binary_name }}
        fi

    - name: Upload release archive
      uses: actions/upload-artifact@v3
      with:
        name: triton-${{ matrix.target }}
        path: triton-${{ matrix.target }}.*

  # 通知
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [code-quality, test, coverage, security, benchmarks]
    if: always()
    steps:
    - name: Notify on success
      if: ${{ needs.code-quality.result == 'success' && needs.test.result == 'success' }}
      run: echo "✅ All tests passed successfully!"

    - name: Notify on failure
      if: ${{ needs.code-quality.result == 'failure' || needs.test.result == 'failure' }}
      run: |
        echo "❌ Some tests failed!"
        exit 1
